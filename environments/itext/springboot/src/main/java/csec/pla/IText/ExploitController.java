package csec.pla.IText;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.Objects;

import com.itextpdf.layout.Document;
import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfDocumentInfo;
import com.itextpdf.kernel.pdf.PdfPage;
import com.itextpdf.kernel.pdf.PdfString;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.kernel.pdf.action.PdfAction;
import com.itextpdf.kernel.pdf.annot.PdfLinkAnnotation;
import com.itextpdf.kernel.pdf.annot.PdfTextAnnotation;
import com.itextpdf.io.image.ImageData;
import com.itextpdf.io.image.ImageDataFactory;
import com.itextpdf.kernel.geom.Rectangle;
import com.itextpdf.layout.element.*;
import com.itextpdf.layout.properties.AreaBreakType;

@RestController
public class ExploitController {

	int MAX_COUNT = 10000;

	private void _delete_pdfs(){
		File directory = new File("/pdfs");

        if (directory.exists() && directory.isDirectory()) {

            for (File file : Objects.requireNonNull(directory.listFiles())) {
                if (!file.isDirectory()) {
                    file.delete();
                }
            }
        }
	}


	private void _injection() throws IOException {
		// Author
		int count = 0;
		for (String str : Payloads.escape_seq) {
			OutputStream fos = new FileOutputStream(new File("/pdfs/author" + String.format("%d", count) + ".pdf"));
			PdfWriter writer = new PdfWriter(fos);
			PdfDocument pdfdoc = new PdfDocument(writer);
			Document doc = new Document(pdfdoc);
			doc.add(new AreaBreak(AreaBreakType.NEXT_PAGE));
			PdfDocumentInfo info = pdfdoc.getDocumentInfo();
			info.setAuthor(str);
			writer.close();
			doc.close();
			count++;
		}

		// Subject
		count = 0;
		for (String str : Payloads.escape_seq) {
			OutputStream fos = new FileOutputStream(new File("/pdfs/subject" + String.format("%d", count) + ".pdf"));
			PdfWriter writer = new PdfWriter(fos);
			PdfDocument pdfdoc = new PdfDocument(writer);
			Document doc = new Document(pdfdoc);
			doc.add(new AreaBreak(AreaBreakType.NEXT_PAGE));
			PdfDocumentInfo info = pdfdoc.getDocumentInfo();
			info.setSubject(str);
			writer.close();
			doc.close();
			count++;
		}

		// Title
		count = 0;
		for (String str : Payloads.escape_seq) {
			OutputStream fos = new FileOutputStream(new File("/pdfs/title" + String.format("%d", count) + ".pdf"));
			PdfWriter writer = new PdfWriter(fos);
			PdfDocument pdfdoc = new PdfDocument(writer);
			Document doc = new Document(pdfdoc);
			doc.add(new AreaBreak(AreaBreakType.NEXT_PAGE));
			PdfDocumentInfo info = pdfdoc.getDocumentInfo();
			info.setTitle(str);
			writer.close();
			doc.close();
			count++;
		}

		// Keywords
		count = 0;
		for (String str : Payloads.escape_seq) {
			OutputStream fos = new FileOutputStream(new File("/pdfs/keywords" + String.format("%d", count) + ".pdf"));
			PdfWriter writer = new PdfWriter(fos);
			PdfDocument pdfdoc = new PdfDocument(writer);
			Document doc = new Document(pdfdoc);
			doc.add(new AreaBreak(AreaBreakType.NEXT_PAGE));
			PdfDocumentInfo info = pdfdoc.getDocumentInfo();
			info.setKeywords(str);
			writer.close();
			doc.close();
			count++;
		}

		// Creator
		count = 0;
		for (String str : Payloads.escape_seq) {
			OutputStream fos = new FileOutputStream(new File("/pdfs/creator" + String.format("%d", count) + ".pdf"));
			PdfWriter writer = new PdfWriter(fos);
			PdfDocument pdfdoc = new PdfDocument(writer);
			Document doc = new Document(pdfdoc);
			doc.add(new AreaBreak(AreaBreakType.NEXT_PAGE));
			PdfDocumentInfo info = pdfdoc.getDocumentInfo();
			info.setCreator(str);
			writer.close();
			doc.close();
			count++;
		}

		// Producer
		count = 0;
		for (String str : Payloads.escape_seq) {
			OutputStream fos = new FileOutputStream(new File("/pdfs/producer" + String.format("%d", count) + ".pdf"));
			PdfWriter writer = new PdfWriter(fos);
			PdfDocument pdfdoc = new PdfDocument(writer);
			Document doc = new Document(pdfdoc);
			doc.add(new AreaBreak(AreaBreakType.NEXT_PAGE));
			PdfDocumentInfo info = pdfdoc.getDocumentInfo();
			info.setProducer(str);
			writer.close();
			doc.close();
			count++;
		}

		// Div div = new Div().add(new Paragraph("This is a paragraph inside a div."));
		// doc.add(div);

		// Paragraph text = new Paragraph().add(new Text(""));
		// doc.add(text);

		// doc.add(new Paragraph("Maximum Memory used by JVM :"));
		
		// // List
		// List list = new List();
		// list.add(new ListItem("File system root: "));
		// list.add(new ListItem("File system root: "));
		// doc.add(list);

		// // Table
		// Table table=new Table(1);
		// table.addHeaderCell(new Cell().add(new Paragraph("Caption")));
		// table.addCell(new Cell().add(new Paragraph("Available Processors")));
		// doc.add(table);

		// // Annotation
		// PdfPage page = pdfdoc.getPage(1);
		// Rectangle rect = new Rectangle(100, 800, 200, 100);
		// PdfTextAnnotation textAnnotation = new PdfTextAnnotation(rect);
		// textAnnotation.setTitle(new PdfString("title"));
		// textAnnotation.setOpen(true);
		// textAnnotation.setContents("Contents");
        // page.addAnnotation(textAnnotation);

		// // URI
		// page = pdfdoc.getPage(1);
		// rect = new Rectangle(100, 800, 200, 100);
		// PdfLinkAnnotation linkAnnotation = new PdfLinkAnnotation(rect);
		// PdfAction action = PdfAction.createURI("http://example.com");
		// linkAnnotation.setAction(action);
		// page.addAnnotation(linkAnnotation);

		// // Images
		// ImageData data = ImageDataFactory.create("\\images\\xref.jpg");
		// Image img = new Image(data);
		// doc.add(img);
	}

	@GetMapping("/")
	public String index() {
		return "Greetings from Spring Boot!";
	}


	@GetMapping("/injection")
	public String injection() {
		try {
			_injection();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return "PDF File Created!";
	}

	@GetMapping("/buffer")
	public String buffer() {
		return "Greetings from Spring Boot!";
	}

	@GetMapping("/os")
	public String os() {
		return "Greetings from Spring Boot!";
	}

}
