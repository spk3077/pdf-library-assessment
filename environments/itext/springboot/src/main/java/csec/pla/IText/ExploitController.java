package csec.pla.IText;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.nio.file.DirectoryStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Objects;

import com.itextpdf.layout.Document;
import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfDocumentInfo;
import com.itextpdf.kernel.pdf.PdfPage;
import com.itextpdf.kernel.pdf.PdfString;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.kernel.pdf.action.PdfAction;
import com.itextpdf.kernel.pdf.annot.PdfLinkAnnotation;
import com.itextpdf.kernel.pdf.annot.PdfTextAnnotation;
import com.itextpdf.io.image.ImageData;
import com.itextpdf.io.image.ImageDataFactory;
import com.itextpdf.kernel.geom.Rectangle;
import com.itextpdf.layout.element.*;

@RestController
public class ExploitController {

	int MAX_COUNT = 10000;
	int NUM_CALC = 900;

	private int _factorial(int n){
		if (n == 0) {
			return 1;
		}
		else {
			return n * _factorial(n - 1);
		}
	}

	@GetMapping("/")
	public String index() {
		int result = _factorial(NUM_CALC);
		return "The factorial of " + NUM_CALC + " is " + result;
	}

	private void _delete_pdfs(){
		File directory = new File("/pdfs");

        if (directory.exists() && directory.isDirectory()) {

            for (File file : Objects.requireNonNull(directory.listFiles())) {
                if (!file.isDirectory()) {
                    file.delete();
                }
            }
        }
	}


	private void _injection() throws IOException {
		// Author
		int count = 0;
		for (String str : Payloads.escape_seq) {
			OutputStream fos = new FileOutputStream(new File("/pdfs/author" + String.format("%d", count) + ".pdf"));
			PdfWriter writer = new PdfWriter(fos);
			PdfDocument pdfdoc = new PdfDocument(writer);
			Document doc = new Document(pdfdoc);
			PdfDocumentInfo info = pdfdoc.getDocumentInfo();
			info.setAuthor(str);
			
			// Test
			Paragraph text = new Paragraph().add(new Text("DOGTEST"));
			doc.add(text);

			doc.close();
			count++;
		}

		// Subject
		count = 0;
		for (String str : Payloads.escape_seq) {
			OutputStream fos = new FileOutputStream(new File("/pdfs/subject" + String.format("%d", count) + ".pdf"));
			PdfWriter writer = new PdfWriter(fos);
			PdfDocument pdfdoc = new PdfDocument(writer);
			Document doc = new Document(pdfdoc);
			PdfDocumentInfo info = pdfdoc.getDocumentInfo();
			info.setSubject(str);

			// Test
			Paragraph text = new Paragraph().add(new Text("DOGTEST"));
			doc.add(text);

			doc.close();
			count++;
		}

		// Title
		count = 0;
		for (String str : Payloads.escape_seq) {
			OutputStream fos = new FileOutputStream(new File("/pdfs/title" + String.format("%d", count) + ".pdf"));
			PdfWriter writer = new PdfWriter(fos);
			PdfDocument pdfdoc = new PdfDocument(writer);
			Document doc = new Document(pdfdoc);
			PdfDocumentInfo info = pdfdoc.getDocumentInfo();
			info.setTitle(str);

			// Test
			Paragraph text = new Paragraph().add(new Text("DOGTEST"));
			doc.add(text);

			doc.close();
			count++;
		}

		// Keywords
		count = 0;
		for (String str : Payloads.escape_seq) {
			OutputStream fos = new FileOutputStream(new File("/pdfs/keywords" + String.format("%d", count) + ".pdf"));
			PdfWriter writer = new PdfWriter(fos);
			PdfDocument pdfdoc = new PdfDocument(writer);
			Document doc = new Document(pdfdoc);
			PdfDocumentInfo info = pdfdoc.getDocumentInfo();
			info.setKeywords(str);

			// Test
			Paragraph text = new Paragraph().add(new Text("DOGTEST"));
			doc.add(text);

			doc.close();
			count++;
		}

		// Creator
		count = 0;
		for (String str : Payloads.escape_seq) {
			OutputStream fos = new FileOutputStream(new File("/pdfs/creator" + String.format("%d", count) + ".pdf"));
			PdfWriter writer = new PdfWriter(fos);
			PdfDocument pdfdoc = new PdfDocument(writer);
			Document doc = new Document(pdfdoc);
			PdfDocumentInfo info = pdfdoc.getDocumentInfo();
			info.setCreator(str);

			// Test
			Paragraph text = new Paragraph().add(new Text("DOGTEST"));
			doc.add(text);

			doc.close();
			count++;
		}

		// Producer
		count = 0;
		for (String str : Payloads.escape_seq) {
			OutputStream fos = new FileOutputStream(new File("/pdfs/producer" + String.format("%d", count) + ".pdf"));
			PdfWriter writer = new PdfWriter(fos);
			PdfDocument pdfdoc = new PdfDocument(writer);
			Document doc = new Document(pdfdoc);
			PdfDocumentInfo info = pdfdoc.getDocumentInfo();
			info.setProducer(str);

			// Test
			Paragraph text = new Paragraph().add(new Text("DOGTEST"));
			doc.add(text);

			doc.close();
			count++;
		}

		// DIV
		count = 0;
		for (String str : Payloads.escape_seq) {
			OutputStream fos = new FileOutputStream(new File("/pdfs/div" + String.format("%d", count) + ".pdf"));
			PdfWriter writer = new PdfWriter(fos);
			PdfDocument pdfdoc = new PdfDocument(writer);
			Document doc = new Document(pdfdoc);
			Div div = new Div().add(new Paragraph(str));
			doc.add(div);

			// Test
			Paragraph text = new Paragraph().add(new Text("DOGTEST"));
			doc.add(text);

			doc.close();
			count++;
		}

		// Text
		count = 0;
		for (String str : Payloads.escape_seq) {
			OutputStream fos = new FileOutputStream(new File("/pdfs/text" + String.format("%d", count) + ".pdf"));
			PdfWriter writer = new PdfWriter(fos);
			PdfDocument pdfdoc = new PdfDocument(writer);
			Document doc = new Document(pdfdoc);
			Paragraph text = new Paragraph().add(new Text(str));
			doc.add(text);

			// Test
			Paragraph text2 = new Paragraph().add(new Text("DOGTEST"));
			doc.add(text2);

			doc.close();
			count++;
		}

		// Paragraph
		count = 0;
		for (String str : Payloads.escape_seq) {
			OutputStream fos = new FileOutputStream(new File("/pdfs/paragraph" + String.format("%d", count) + ".pdf"));
			PdfWriter writer = new PdfWriter(fos);
			PdfDocument pdfdoc = new PdfDocument(writer);
			Document doc = new Document(pdfdoc);
			doc.add(new Paragraph(str));

			// Test
			Paragraph text = new Paragraph().add(new Text("DOGTEST"));
			doc.add(text);

			doc.close();
			count++;
		}

		// List
		count = 0;
		for (String str : Payloads.escape_seq) {
			OutputStream fos = new FileOutputStream(new File("/pdfs/list" + String.format("%d", count) + ".pdf"));
			PdfWriter writer = new PdfWriter(fos);
			PdfDocument pdfdoc = new PdfDocument(writer);
			Document doc = new Document(pdfdoc);
			List list = new List();
			list.add(new ListItem(str));
			doc.add(list);

			// Test
			Paragraph text = new Paragraph().add(new Text("DOGTEST"));
			doc.add(text);

			doc.close();
			count++;
		}

		// Table
		count = 0;
		for (String str : Payloads.escape_seq) {
			OutputStream fos = new FileOutputStream(new File("/pdfs/table" + String.format("%d", count) + ".pdf"));
			PdfWriter writer = new PdfWriter(fos);
			PdfDocument pdfdoc = new PdfDocument(writer);
			Document doc = new Document(pdfdoc);

			Table table=new Table(1);
			table.addHeaderCell(new Cell().add(new Paragraph(str)));
			table.addCell(new Cell().add(new Paragraph(str)));
			doc.add(table);

			// Test
			Paragraph text = new Paragraph().add(new Text("DOGTEST"));
			doc.add(text);

			doc.close();
			count++;
		}

		// text_annotation
		count = 0;
		for (String str : Payloads.escape_seq) {
			OutputStream fos = new FileOutputStream(new File("/pdfs/text_annotation" + String.format("%d", count) + ".pdf"));
			PdfWriter writer = new PdfWriter(fos);
			PdfDocument pdfdoc = new PdfDocument(writer);
			Document doc = new Document(pdfdoc);

			// Create basic page prior to injection
			doc.add(new Paragraph().add(new Text("A")));

			PdfPage page = pdfdoc.getPage(1);
			Rectangle rect = new Rectangle(100, 800, 200, 100);
			PdfTextAnnotation textAnnotation = new PdfTextAnnotation(rect);
			textAnnotation.setTitle(new PdfString(str));
			textAnnotation.setOpen(true);
			textAnnotation.setContents(str);
			page.addAnnotation(textAnnotation);

			// Test
			Paragraph text = new Paragraph().add(new Text("DOGTEST"));
			doc.add(text);

			doc.close();
			count++;
		}

		// uri_annotation
		count = 0;
		for (String str : Payloads.escape_seq) {
			OutputStream fos = new FileOutputStream(new File("/pdfs/uri_annotation" + String.format("%d", count) + ".pdf"));
			PdfWriter writer = new PdfWriter(fos);
			PdfDocument pdfdoc = new PdfDocument(writer);
			Document doc = new Document(pdfdoc);

			// Create basic page prior to injection
			doc.add(new Paragraph().add(new Text("A")));

			PdfPage page = pdfdoc.getPage(1);
			Rectangle rect = new Rectangle(100, 800, 200, 100);
			PdfLinkAnnotation linkAnnotation = new PdfLinkAnnotation(rect);
			PdfAction action = PdfAction.createURI(str);
			linkAnnotation.setAction(action);
			page.addAnnotation(linkAnnotation);

			// Test
			Paragraph text = new Paragraph().add(new Text("DOGTEST"));
			doc.add(text);

			doc.close();
			count++;
		}

		// Image
		Path dir = Paths.get("/images");
		DirectoryStream<Path> stream = Files.newDirectoryStream(dir);
		count = 0;
		for (Path filepath : stream) {
			OutputStream fos = new FileOutputStream(new File("/pdfs/image" + String.format("%d", count) + ".pdf"));
			PdfWriter writer = new PdfWriter(fos);
			PdfDocument pdfdoc = new PdfDocument(writer);
			Document doc = new Document(pdfdoc);

			ImageData data = ImageDataFactory.create(filepath.toString());
			Image img = new Image(data);
			doc.add(img);

			// Test
			Paragraph text = new Paragraph().add(new Text("DOGTEST"));
			doc.add(text);

			doc.close();
			count++;
		}
		stream.close();

	}

	@GetMapping("/injection")
	public String injection() {
		_delete_pdfs();
		try {
			_injection();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return "PDF Injection Complete!";
	}

	private void _buffer() throws IOException {
		// Author
		int count = 1;
		while (count < MAX_COUNT) {
			OutputStream fos = new FileOutputStream(new File("/pdfs/author.pdf"));
			PdfWriter writer = new PdfWriter(fos);
			PdfDocument pdfdoc = new PdfDocument(writer);
			Document doc = new Document(pdfdoc);
			PdfDocumentInfo info = pdfdoc.getDocumentInfo();
			info.setAuthor("V".repeat(count));
			doc.close();
			count++;
		}

		// Subject
		count = 1;
		while (count < MAX_COUNT) {
			OutputStream fos = new FileOutputStream(new File("/pdfs/subject.pdf"));
			PdfWriter writer = new PdfWriter(fos);
			PdfDocument pdfdoc = new PdfDocument(writer);
			Document doc = new Document(pdfdoc);
			PdfDocumentInfo info = pdfdoc.getDocumentInfo();
			info.setSubject("V".repeat(count));
			doc.close();
			count++;
		}

		// Title
		count = 1;
		while (count < MAX_COUNT) {
			OutputStream fos = new FileOutputStream(new File("/pdfs/title.pdf"));
			PdfWriter writer = new PdfWriter(fos);
			PdfDocument pdfdoc = new PdfDocument(writer);
			Document doc = new Document(pdfdoc);
			PdfDocumentInfo info = pdfdoc.getDocumentInfo();
			info.setTitle("V".repeat(count));
			doc.close();
			count++;
		}

		// Keywords
		count = 1;
		while (count < MAX_COUNT) {
			OutputStream fos = new FileOutputStream(new File("/pdfs/keywords.pdf"));
			PdfWriter writer = new PdfWriter(fos);
			PdfDocument pdfdoc = new PdfDocument(writer);
			Document doc = new Document(pdfdoc);
			PdfDocumentInfo info = pdfdoc.getDocumentInfo();
			info.setKeywords("V".repeat(count));
			doc.close();
			count++;
		}

		// Creator
		count = 1;
		while (count < MAX_COUNT) {
			OutputStream fos = new FileOutputStream(new File("/pdfs/creator.pdf"));
			PdfWriter writer = new PdfWriter(fos);
			PdfDocument pdfdoc = new PdfDocument(writer);
			Document doc = new Document(pdfdoc);
			PdfDocumentInfo info = pdfdoc.getDocumentInfo();
			info.setCreator("V".repeat(count));
			doc.close();
			count++;
		}

		// Producer
		count = 1;
		while (count < MAX_COUNT) {
			OutputStream fos = new FileOutputStream(new File("/pdfs/producer.pdf"));
			PdfWriter writer = new PdfWriter(fos);
			PdfDocument pdfdoc = new PdfDocument(writer);
			Document doc = new Document(pdfdoc);
			PdfDocumentInfo info = pdfdoc.getDocumentInfo();
			info.setProducer("V".repeat(count));
			doc.close();
			count++;
		}

		// DIV
		count = 1;
		while (count < MAX_COUNT) {
			OutputStream fos = new FileOutputStream(new File("/pdfs/div.pdf"));
			PdfWriter writer = new PdfWriter(fos);
			PdfDocument pdfdoc = new PdfDocument(writer);
			Document doc = new Document(pdfdoc);
			Div div = new Div().add(new Paragraph("V".repeat(count)));
			doc.add(div);
			doc.close();
			count++;
		}

		// Text
		count = 1;
		while (count < MAX_COUNT) {
			OutputStream fos = new FileOutputStream(new File("/pdfs/text.pdf"));
			PdfWriter writer = new PdfWriter(fos);
			PdfDocument pdfdoc = new PdfDocument(writer);
			Document doc = new Document(pdfdoc);
			Paragraph text = new Paragraph().add(new Text("V".repeat(count)));
			doc.add(text);
			doc.close();
			count++;
		}

		// Paragraph
		count = 1;
		while (count < MAX_COUNT) {
			OutputStream fos = new FileOutputStream(new File("/pdfs/paragraph.pdf"));
			PdfWriter writer = new PdfWriter(fos);
			PdfDocument pdfdoc = new PdfDocument(writer);
			Document doc = new Document(pdfdoc);
			doc.add(new Paragraph("V".repeat(count)));
			doc.close();
			count++;
		}

		// List
		count = 1;
		while (count < MAX_COUNT) {
			OutputStream fos = new FileOutputStream(new File("/pdfs/list.pdf"));
			PdfWriter writer = new PdfWriter(fos);
			PdfDocument pdfdoc = new PdfDocument(writer);
			Document doc = new Document(pdfdoc);
			List list = new List();
			list.add(new ListItem("V".repeat(count)));
			doc.add(list);
			doc.close();
			count++;
		}

		// Table
		count = 1;
		while (count < MAX_COUNT) {
			OutputStream fos = new FileOutputStream(new File("/pdfs/table.pdf"));
			PdfWriter writer = new PdfWriter(fos);
			PdfDocument pdfdoc = new PdfDocument(writer);
			Document doc = new Document(pdfdoc);

			Table table=new Table(1);
			table.addHeaderCell(new Cell().add(new Paragraph("V".repeat(count))));
			table.addCell(new Cell().add(new Paragraph("V".repeat(count))));
			doc.add(table);
			doc.close();
			count++;
		}

		// text_annotation
		count = 1;
		while (count < MAX_COUNT) {
			OutputStream fos = new FileOutputStream(new File("/pdfs/text_annotation.pdf"));
			PdfWriter writer = new PdfWriter(fos);
			PdfDocument pdfdoc = new PdfDocument(writer);
			Document doc = new Document(pdfdoc);

			// Create basic page prior to injection
			doc.add(new Paragraph().add(new Text("A")));

			PdfPage page = pdfdoc.getPage(1);
			Rectangle rect = new Rectangle(100, 800, 200, 100);
			PdfTextAnnotation textAnnotation = new PdfTextAnnotation(rect);
			textAnnotation.setTitle(new PdfString("V".repeat(count)));
			textAnnotation.setOpen(true);
			textAnnotation.setContents("V".repeat(count));
			page.addAnnotation(textAnnotation);
			doc.close();
			count++;
		}

		// uri_annotation
		count = 1;
		while (count < MAX_COUNT) {
			OutputStream fos = new FileOutputStream(new File("/pdfs/uri_annotation.pdf"));
			PdfWriter writer = new PdfWriter(fos);
			PdfDocument pdfdoc = new PdfDocument(writer);
			Document doc = new Document(pdfdoc);

			// Create basic page prior to injection
			doc.add(new Paragraph().add(new Text("A")));

			PdfPage page = pdfdoc.getPage(1);
			Rectangle rect = new Rectangle(100, 800, 200, 100);
			PdfLinkAnnotation linkAnnotation = new PdfLinkAnnotation(rect);
			PdfAction action = PdfAction.createURI("V".repeat(count));
			linkAnnotation.setAction(action);
			page.addAnnotation(linkAnnotation);
			doc.close();
			count++;
		}
	}

	@GetMapping("/buffer")
	public String buffer() {
		_delete_pdfs();
		try {
			_buffer();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return "Buffer Overflow Testing Complete!";
	}

	
	private boolean _check_test_file() {
		String filePath = "/test";
		File file = new File(filePath);
		
		if (file.exists() && !file.isDirectory()) {
			file.delete();
			return true;
		} 

		return false;
	}

	private ArrayList<String> _os() throws IOException {
		ArrayList<String> ret = new ArrayList<>();
		// Author
		int count = 0;
		for (String str : Payloads.os_commands) {
			OutputStream fos = new FileOutputStream(new File("/pdfs/author.pdf"));
			PdfWriter writer = new PdfWriter(fos);
			PdfDocument pdfdoc = new PdfDocument(writer);
			Document doc = new Document(pdfdoc);
			PdfDocumentInfo info = pdfdoc.getDocumentInfo();
			info.setAuthor(str);
			doc.close();
			count++;

			if (_check_test_file()) {
				System.out.println("Endpoint: Author<br/>Command: " + str + "<br/><br/>");
				ret.add("Endpoint: Author<br/>Command: " + str + "<br/><br/>");
			}
		}

		// Subject
		count = 0;
		for (String str : Payloads.os_commands) {
			OutputStream fos = new FileOutputStream(new File("/pdfs/subject.pdf"));
			PdfWriter writer = new PdfWriter(fos);
			PdfDocument pdfdoc = new PdfDocument(writer);
			Document doc = new Document(pdfdoc);
			PdfDocumentInfo info = pdfdoc.getDocumentInfo();
			info.setSubject(str);
			doc.close();
			count++;

			if (_check_test_file()) {
				System.out.println("Endpoint: Subject<br/>Command: " + str + "<br/><br/>");
				ret.add("Endpoint: Subject<br/>Command: " + str + "<br/><br/>");
			}
		}

		// Title
		count = 0;
		for (String str : Payloads.os_commands) {
			OutputStream fos = new FileOutputStream(new File("/pdfs/title.pdf"));
			PdfWriter writer = new PdfWriter(fos);
			PdfDocument pdfdoc = new PdfDocument(writer);
			Document doc = new Document(pdfdoc);
			PdfDocumentInfo info = pdfdoc.getDocumentInfo();
			info.setTitle(str);
			doc.close();
			count++;

			if (_check_test_file()) {
				System.out.println("Endpoint: Title<br/>Command: " + str + "<br/><br/>");
				ret.add("Endpoint: Title<br/>Command: " + str + "<br/><br/>");
			}
		}

		// Keywords
		count = 0;
		for (String str : Payloads.os_commands) {
			OutputStream fos = new FileOutputStream(new File("/pdfs/keywords.pdf"));
			PdfWriter writer = new PdfWriter(fos);
			PdfDocument pdfdoc = new PdfDocument(writer);
			Document doc = new Document(pdfdoc);
			PdfDocumentInfo info = pdfdoc.getDocumentInfo();
			info.setKeywords(str);
			doc.close();
			count++;

			if (_check_test_file()) {
				System.out.println("Endpoint: Keywords<br/>Command: " + str + "<br/><br/>");
				ret.add("Endpoint: Keywords<br/>Command: " + str + "<br/><br/>");
			}
		}

		// Creator
		count = 0;
		for (String str : Payloads.os_commands) {
			OutputStream fos = new FileOutputStream(new File("/pdfs/creator.pdf"));
			PdfWriter writer = new PdfWriter(fos);
			PdfDocument pdfdoc = new PdfDocument(writer);
			Document doc = new Document(pdfdoc);
			PdfDocumentInfo info = pdfdoc.getDocumentInfo();
			info.setCreator(str);
			doc.close();
			count++;

			if (_check_test_file()) {
				System.out.println("Endpoint: Creator<br/>Command: " + str + "<br/><br/>");
				ret.add("Endpoint: Creator<br/>Command: " + str + "<br/><br/>");
			}
		}

		// Producer
		count = 0;
		for (String str : Payloads.os_commands) {
			OutputStream fos = new FileOutputStream(new File("/pdfs/producer.pdf"));
			PdfWriter writer = new PdfWriter(fos);
			PdfDocument pdfdoc = new PdfDocument(writer);
			Document doc = new Document(pdfdoc);
			PdfDocumentInfo info = pdfdoc.getDocumentInfo();
			info.setProducer(str);
			doc.close();
			count++;

			if (_check_test_file()) {
				System.out.println("Endpoint: Producer<br/>Command: " + str + "<br/><br/>");
				ret.add("Endpoint: Producer<br/>Command: " + str + "<br/><br/>");
			}
		}

		// DIV
		count = 0;
		for (String str : Payloads.os_commands) {
			OutputStream fos = new FileOutputStream(new File("/pdfs/div.pdf"));
			PdfWriter writer = new PdfWriter(fos);
			PdfDocument pdfdoc = new PdfDocument(writer);
			Document doc = new Document(pdfdoc);
			Div div = new Div().add(new Paragraph(str));
			doc.add(div);
			doc.close();
			count++;

			if (_check_test_file()) {
				System.out.println("Endpoint: DIV<br/>Command: " + str + "<br/><br/>");
				ret.add("Endpoint: DIV<br/>Command: " + str + "<br/><br/>");
			}
		}

		// Text
		count = 0;
		for (String str : Payloads.os_commands) {
			OutputStream fos = new FileOutputStream(new File("/pdfs/text.pdf"));
			PdfWriter writer = new PdfWriter(fos);
			PdfDocument pdfdoc = new PdfDocument(writer);
			Document doc = new Document(pdfdoc);
			Paragraph text = new Paragraph().add(new Text(str));
			doc.add(text);
			doc.close();
			count++;

			if (_check_test_file()) {
				System.out.println("Endpoint: Text<br/>Command: " + str + "<br/><br/>");
				ret.add("Endpoint: Text<br/>Command: " + str + "<br/><br/>");
			}
		}

		// Paragraph
		count = 0;
		for (String str : Payloads.os_commands) {
			OutputStream fos = new FileOutputStream(new File("/pdfs/paragraph.pdf"));
			PdfWriter writer = new PdfWriter(fos);
			PdfDocument pdfdoc = new PdfDocument(writer);
			Document doc = new Document(pdfdoc);
			doc.add(new Paragraph(str));
			doc.close();
			count++;

			if (_check_test_file()) {
				System.out.println("Endpoint: Creator<br/>Command: " + str + "<br/><br/>");
				ret.add("Endpoint: Creator<br/>Command: " + str + "<br/><br/>");
			}
		}

		// List
		count = 0;
		for (String str : Payloads.os_commands) {
			OutputStream fos = new FileOutputStream(new File("/pdfs/list.pdf"));
			PdfWriter writer = new PdfWriter(fos);
			PdfDocument pdfdoc = new PdfDocument(writer);
			Document doc = new Document(pdfdoc);
			List list = new List();
			list.add(new ListItem(str));
			doc.add(list);
			doc.close();
			count++;

			if (_check_test_file()) {
				System.out.println("Endpoint: List<br/>Command: " + str + "<br/><br/>");
				ret.add("Endpoint: List<br/>Command: " + str + "<br/><br/>");
			}
		}

		// Table
		count = 0;
		for (String str : Payloads.os_commands) {
			OutputStream fos = new FileOutputStream(new File("/pdfs/table.pdf"));
			PdfWriter writer = new PdfWriter(fos);
			PdfDocument pdfdoc = new PdfDocument(writer);
			Document doc = new Document(pdfdoc);

			Table table=new Table(1);
			table.addHeaderCell(new Cell().add(new Paragraph(str)));
			table.addCell(new Cell().add(new Paragraph(str)));
			doc.add(table);
			doc.close();
			count++;

			if (_check_test_file()) {
				System.out.println("Endpoint: Table<br/>Command: " + str + "<br/><br/>");
				ret.add("Endpoint: Table<br/>Command: " + str + "<br/><br/>");
			}
		}

		// text_annotation
		count = 0;
		for (String str : Payloads.os_commands) {
			OutputStream fos = new FileOutputStream(new File("/pdfs/text_annotation.pdf"));
			PdfWriter writer = new PdfWriter(fos);
			PdfDocument pdfdoc = new PdfDocument(writer);
			Document doc = new Document(pdfdoc);

			// Create basic page prior to injection
			doc.add(new Paragraph().add(new Text("A")));

			PdfPage page = pdfdoc.getPage(1);
			Rectangle rect = new Rectangle(100, 800, 200, 100);
			PdfTextAnnotation textAnnotation = new PdfTextAnnotation(rect);
			textAnnotation.setTitle(new PdfString(str));
			textAnnotation.setOpen(true);
			textAnnotation.setContents(str);
			page.addAnnotation(textAnnotation);
			doc.close();
			count++;

			if (_check_test_file()) {
				System.out.println("Endpoint: Text_Annotation<br/>Command: " + str + "<br/><br/>");
				ret.add("Endpoint: Text_Annotation<br/>Command: " + str + "<br/><br/>");
			}
		}

		// uri_annotation
		count = 0;
		for (String str : Payloads.os_commands) {
			OutputStream fos = new FileOutputStream(new File("/pdfs/uri_annotation.pdf"));
			PdfWriter writer = new PdfWriter(fos);
			PdfDocument pdfdoc = new PdfDocument(writer);
			Document doc = new Document(pdfdoc);

			// Create basic page prior to injection
			doc.add(new Paragraph().add(new Text("A")));

			PdfPage page = pdfdoc.getPage(1);
			Rectangle rect = new Rectangle(100, 800, 200, 100);
			PdfLinkAnnotation linkAnnotation = new PdfLinkAnnotation(rect);
			PdfAction action = PdfAction.createURI(str);
			linkAnnotation.setAction(action);
			page.addAnnotation(linkAnnotation);
			doc.close();
			count++;

			if (_check_test_file()) {
				System.out.println("Endpoint: URI<br/>Command: " + str + "<br/><br/>");
				ret.add("Endpoint: URI<br/>Command: " + str + "<br/><br/>");
			}
		}
		return ret;
	}

	@GetMapping("/os")
	public String os() {
		_delete_pdfs();
		ArrayList<String> arrayList= new ArrayList<>();
		try {
			arrayList.addAll(_os());
			System.out.println(arrayList);
			
		} catch (IOException e) {
			e.printStackTrace();
		}

		return "Operating System Command Injection Complete!" + arrayList.toString();
	}
}
