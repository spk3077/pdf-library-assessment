package csec.pla.PDFBox;

import java.io.IOException;
import java.lang.IllegalArgumentException;
import java.nio.file.DirectoryStream;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDDocumentInformation;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDPageContentStream;
import org.apache.pdfbox.pdmodel.common.PDRectangle;
import org.apache.pdfbox.pdmodel.common.PDPageLabelRange;
import org.apache.pdfbox.pdmodel.common.PDPageLabels;
import org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;
import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLink;
import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationTextMarkup;
import org.apache.pdfbox.pdmodel.interactive.action.PDActionURI;
import org.apache.pdfbox.pdmodel.font.PDType1Font;

@RestController
public class ExploitController {

	@GetMapping("/")
	public String index() {
		return "Greetings from Spring Boot!";
	}


	private PDDocument _createPDF() throws IOException {
		PDDocument doc = new PDDocument();
		doc.addPage(new PDPage());
		return doc;
	}

	private void _injection() throws IOException {
		// Author
		int count = 0;
		for (String str : Payloads.escape_seq) {
			PDDocument doc = _createPDF();
			PDPage page = doc.getPage(0);
			PDDocumentInformation pdd = doc.getDocumentInformation();
			pdd.setAuthor(str);

			// Check if Present
			PDPageContentStream contents = new PDPageContentStream(doc, page);
			contents.beginText();
			contents.setFont(PDType1Font.TIMES_BOLD_ITALIC, 14);
			contents.newLineAtOffset(50, 20);
			contents.showText("DOGTEST");
			contents.endText();
			contents.close();
			doc.save("/pdfs/author" + String.format("%d", count) + ".pdf");
			doc.close();
			count++;
		}
		// Title
		count = 0;
		for (String str : Payloads.escape_seq) {
			PDDocument doc = _createPDF();
			PDPage page = doc.getPage(0);
			PDDocumentInformation pdd = doc.getDocumentInformation();
			pdd.setTitle(str);

			// Check if Present
			PDPageContentStream contents = new PDPageContentStream(doc, page);
			contents.beginText();
			contents.setFont(PDType1Font.TIMES_BOLD_ITALIC, 14);
			contents.newLineAtOffset(50, 20);
			contents.showText("DOGTEST");
			contents.endText();
			contents.close();
			doc.save("/pdfs/title" + String.format("%d", count) + ".pdf");
			doc.close();
			count++;
		}

		// Creator
		count = 0;
		for (String str : Payloads.escape_seq) {
			PDDocument doc = _createPDF();
			PDPage page = doc.getPage(0);
			PDDocumentInformation pdd = doc.getDocumentInformation();
			pdd.setCreator(str);

			// Check if Present
			PDPageContentStream contents = new PDPageContentStream(doc, page);
			contents.beginText();
			contents.setFont(PDType1Font.TIMES_BOLD_ITALIC, 14);
			contents.newLineAtOffset(50, 20);
			contents.showText("DOGTEST");
			contents.endText();
			contents.close();
			doc.save("/pdfs/creator" + String.format("%d", count) + ".pdf");
			doc.close();
			count++;
		}

		// Subject
		count = 0;
		for (String str : Payloads.escape_seq) {
			PDDocument doc = _createPDF();
			PDPage page = doc.getPage(0);
			PDDocumentInformation pdd = doc.getDocumentInformation();
			pdd.setSubject(str);

			// Check if Present
			PDPageContentStream contents = new PDPageContentStream(doc, page);
			contents.beginText();
			contents.setFont(PDType1Font.TIMES_BOLD_ITALIC, 14);
			contents.newLineAtOffset(50, 20);
			contents.showText("DOGTEST");
			contents.endText();
			contents.close();
			doc.save("/pdfs/subject" + String.format("%d", count) + ".pdf");
			doc.close();
			count++;
		}

		// Keywords
		count = 0;
		for (String str : Payloads.escape_seq) {
			PDDocument doc = _createPDF();
			PDPage page = doc.getPage(0);
			PDDocumentInformation pdd = doc.getDocumentInformation();
			pdd.setKeywords(str);

			// Check if Present
			PDPageContentStream contents = new PDPageContentStream(doc, page);
			contents.beginText();
			contents.setFont(PDType1Font.TIMES_BOLD_ITALIC, 14);
			contents.newLineAtOffset(50, 20);
			contents.showText("DOGTEST");
			contents.endText();
			contents.close();
			doc.save("/pdfs/keywords" + String.format("%d", count) + ".pdf");
			doc.close();
			count++;
		}

		// Producer
		count = 0;
		for (String str : Payloads.escape_seq) {
			PDDocument doc = _createPDF();
			PDPage page = doc.getPage(0);
			PDDocumentInformation pdd = doc.getDocumentInformation();
			pdd.setProducer(str);

			// Check if Present
			PDPageContentStream contents = new PDPageContentStream(doc, page);
			contents.beginText();
			contents.setFont(PDType1Font.TIMES_BOLD_ITALIC, 14);
			contents.newLineAtOffset(50, 20);
			contents.showText("DOGTEST");
			contents.endText();
			contents.close();
			doc.save("/pdfs/producer" + String.format("%d", count) + ".pdf");
			doc.close();
			count++;
		}

		// Text
		count = 0;
		for (String str : Payloads.escape_seq) {
			PDDocument doc = _createPDF();
			PDPage page = doc.getPage(0);
			PDPageContentStream contentStream = new PDPageContentStream(doc, page);
			contentStream.beginText();
			contentStream.setFont(PDType1Font.HELVETICA_BOLD_OBLIQUE, 14);  
			contentStream.newLineAtOffset(20, 450);
			try {
				contentStream.showText(str);
			}
			catch (IllegalArgumentException e) {
				continue;
			}
			contentStream.showText("DOGTEST");
			contentStream.endText();
			contentStream.close();
			doc.save("/pdfs/text" + String.format("%d", count) + ".pdf");
			doc.close();
			count++;
		}

		// Annotation
		count = 0;
		for (String str : Payloads.escape_seq) {
			PDDocument doc = _createPDF();
			PDPage page = doc.getPage(0);
			PDAnnotationTextMarkup txtMark = new PDAnnotationTextMarkup(PDAnnotationTextMarkup.SUB_TYPE_HIGHLIGHT);
			PDRectangle position = new PDRectangle();
			position.setLowerLeftX(100);
			position.setLowerLeftY(700);
			position.setUpperRightX(250);
			position.setUpperRightY(750);
			txtMark.setRectangle(position);
			float[] quads = new float[8];
			quads[0] = position.getLowerLeftX();
			quads[1] = position.getLowerLeftY();
			quads[2] = position.getUpperRightX();
			quads[3] = position.getLowerLeftY();
			quads[4] = position.getLowerLeftX();
			quads[5] = position.getUpperRightY();
			quads[6] = position.getUpperRightX();
			quads[7] = position.getUpperRightY();
			txtMark.setQuadPoints(quads);
			txtMark.setContents(str);
			page.getAnnotations().add(txtMark);

			// Check if Present
			PDPageContentStream contents = new PDPageContentStream(doc, page);
			contents.beginText();
			contents.setFont(PDType1Font.TIMES_BOLD_ITALIC, 14);
			contents.newLineAtOffset(50, 20);
			contents.showText("DOGTEST");
			contents.endText();
			contents.close();

			doc.save("/pdfs/annotation" + String.format("%d", count) + ".pdf");
			doc.close();
			count++;
		}

		// URI
		count = 0;
		for (String str : Payloads.escape_seq) {
			PDDocument doc = _createPDF();
			PDPage page = doc.getPage(0);
			PDRectangle position = new PDRectangle();
			position.setLowerLeftX(100);
			position.setLowerLeftY(500);
			position.setUpperRightX(200);
			position.setUpperRightY(550);
			PDAnnotationLink link = new PDAnnotationLink();
			link.setRectangle(position);
			
			PDActionURI action = new PDActionURI();
			action.setURI(str);
			link.setAction(action);
			page.getAnnotations().add(link);

			// Check if Present
			PDPageContentStream contents = new PDPageContentStream(doc, page);
			contents.beginText();
			contents.setFont(PDType1Font.TIMES_BOLD_ITALIC, 14);
			contents.newLineAtOffset(50, 20);
			contents.showText("DOGTEST");
			contents.endText();
			contents.close();
			
			doc.save("/pdfs/uri" + String.format("%d", count) + ".pdf");
			doc.close();
			count++;
		}

		// Prefix Labels
		count = 0;
		for (String str : Payloads.escape_seq) {
			PDDocument doc = _createPDF();
			PDPage page = doc.getPage(0);
			PDPageLabels pageLabels = new PDPageLabels(doc);
			PDPageLabelRange pageLabelRange = new PDPageLabelRange();
			pageLabelRange.setStyle(PDPageLabelRange.STYLE_ROMAN_UPPER);
			pageLabelRange.setPrefix(str);
			pageLabelRange.setStart(1);
			pageLabels.setLabelItem(0, pageLabelRange);
			doc.getDocumentCatalog().setPageLabels(pageLabels);

			// Check if Present
			PDPageContentStream contents = new PDPageContentStream(doc, page);
			contents.beginText();
			contents.setFont(PDType1Font.TIMES_BOLD_ITALIC, 14);
			contents.newLineAtOffset(50, 20);
			contents.showText("DOGTEST");
			contents.endText();
			contents.close();

			doc.save("/pdfs/label" + String.format("%d", count) + ".pdf");
			doc.close();
			count++;
		}
		// Image
		Path dir = Paths.get("/images");
		DirectoryStream<Path> stream = Files.newDirectoryStream(dir);
		count = 0;
		for (Path filepath : stream) {
			PDDocument doc = _createPDF();
			PDPage page = doc.getPage(0);
			PDImageXObject pdImage = PDImageXObject.createFromFile(filepath.toString(), doc);
			PDPageContentStream contents = new PDPageContentStream(doc, page);
			contents.drawImage(pdImage, 250, 300);

			// Check if Present
			contents.beginText();
			contents.setFont(PDType1Font.TIMES_BOLD_ITALIC, 14);
			contents.newLineAtOffset(50, 20);
			contents.showText("DOGTEST");
			contents.endText();

			contents.close();
			doc.save("/pdfs/image" + String.format("%d", count) + ".pdf");
			doc.close();
			count++;
		}
		stream.close();
	}

	@GetMapping("/injection")
	public String injection() {
		try {
			_injection();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return "PDF Injection Complete!";
	}

	@GetMapping("/buffer")
	public String buffer() {
		return "Greetings from Spring Boot!";
	}

	private String _check_test_file(String endpoint, String command) {
		String filePath = "/test";
		File file = new File(filePath);
		
		if (file.exists() && !file.isDirectory()) {
			return "Endpoint: " + endpoint + "<br/>Command: " + command + "<br/><br/>";
		} 

		return "";
	}

	@GetMapping("/os")
	public String os() {
		return "Greetings from Spring Boot!";
	}
}
