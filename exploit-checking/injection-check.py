"""
File: injection-check.py
Assignment: MS Capstone
Lanuguage: python3
Author: Sean Kells <spk3077@rit.edu>
Purpose: Test generated PDFs for PDF Injection (PDF Injection & Image Escape)
"""
import sys
import re
from os import listdir
from os.path import join, dirname

import pikepdf
from PyPDF2 import PdfReader
from PyPDF2.errors import PdfStreamError, PdfReadError


sys.path.insert(0, '/home/vandalieu/pdf-library-assessment/payloads')
from py_payloads import escape_seq


PAYLOADS: set = set(escape_seq)
DIR_TO_PDFS: str = "/../environments/dompdf/php/pdfs"

def find_all_indices(substring, input_string) -> list:
    """
    find_all_indices() get all indexes of the substring within the input_string

    :param substring: substring to search for inside the input_strings
    :param input_string: string to search
    :return: List of indexes of the substring
    """
    return [m.start() for m in re.finditer(re.escape(substring), input_string)]


def get_files() -> set:
    """
    get_files retrieves all the filenames of PDFs within the DIR_TO_PDFS directory

    :return: Set containing PDF file paths
    """
    ret: set = set()
    dir: str = dirname(__file__) + DIR_TO_PDFS

    for filename in listdir(dir):
        if filename == "README.md":
            continue

        ret.add(join(dir, filename))

    return ret


def check_injection(injection: bytes) -> bool:
    """
    check_injection checks if the injected content successfully escaped the grasp of it's associated structure in the PDF

    :param injection: string to assess
    :return: True if injection is likely present, False if injection unsuccessful
    """
    if injection not in PAYLOADS and injection.rfind('</a>') == -1 and injection.rfind('endstream') == -1:
        # print(injection)
        return True

    else:
        return False


def check_pdf_valid(file_path: str) -> bool:
    """
    check_pdf_valid checks if the inputted file_path is a valid PDF

    :param file_path: the file_path 
    :return: True if input PDF is valid, false if invalid
    """
    try:
        with open(file_path, 'rb') as f:
            # PyPDF2 Library
            pyPDFreader = PdfReader(f, True)
            pyPDFpage = pyPDFreader.pages[0]
            pyPDFimages = pyPDFpage.images

            # PikePDF
            pikeFile = pikepdf.Pdf.open(file_path)
            pikePage = pikeFile.pages[0]
            pikeImages = pikePage.images

            # If the PDF Structure broke
            if not pyPDFreader.metadata:
                return False
            
            # If DOGTEST Text can be read
            if pyPDFpage.extract_text().find("DOGTEST") == -1:
                return False

            # If injection is in text
            full_text: str = pyPDFpage.extract_text()
            inject_index: list = find_all_indices('hacker', full_text)
            for i in range(len(inject_index)):
                if len(inject_index) >= i + 2:
                    i_inject: str = full_text[inject_index[i]:inject_index[i+1]]
                else:
                    i_inject: str = full_text[inject_index[i]:full_text.find("DOGTEST")]


                # if check_injection(i_inject):
                #     return False


            # If Annotations were Injected into
            if pikePage.get("/Annots") != None:
                for annots in pikePage.get("/Annots"):
                    uri: str = str(annots.get("/A").get("/URI")).encode("utf-8")

                    if not uri:
                        return False
                    
                    elif check_injection(uri):
                        return False

        return True
    except Exception as ex:
        if str(ex) == "Image data is not rectangular":
            return True

        return False


def main():
    """
    main is primary function when executing the Python script.

    :return: Nothing
    """
    files: set = get_files()

    count: int = 0
    for file in files:
        if not check_pdf_valid(file):
            # print("The file, " + file[file.rfind('/') + 1:] + " was found to be invalid. Check for injection")
            count += 1

    if count == 0:
        print("No injections detected!")


if __name__ == "__main__":
    main()